Comandos CMD

Configuración de Git
Como se ha visto brevemente en [ch01-introduction], podemos acceder a los ajustes de configuración de Git a través del comando git config. Una de las primeras acciones que has realizado con Git ha sido el configurar tu nombre y tu dirección de correo electrónico.

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

Crear git en el directorio actual, iniciar el repositorio de git.
Se crea con el nombre "master" por defecto
git init

Cambiar el nombre del repositorio (branch) a "main"
git branch -m main

Cambiar el nombre por defecto de "master" a "main" al crear nuevos branch.
git config --global init.defaultBranch main

Añadir un fichero al branch.
git add nombre_fichero.py

añadir todos los ficheros pendientes al branch
git add .

Crear una copia de la version (fotrgrafia de ficheros)
Nota: Hay que anotar una descripción del commit
git commit

Crear una copia de la version (fotrgrafia de ficheros)
Con comentario integrado
git commit -m "Esta es la primera version"

Ver el estado actual del proyecto, del branch
git status

Ver los cambios del branch
El indicador (HEAD) indica donde nos encontramos
git log

Ver el rgistro del log
git reflog

Regresar un paso atras de un fichero sin commit
git checkout nombre_fichero.py

Volver atras a la ultima copia, fotografia
git reset

Ver un recorrido del branch
git log --graph

Ver en una sola linea
git log --graph --pretty=oneline
git log --graph --decorate --all --oneline

Crear un Alias en git para crear comandos personalizados
cremamos el comando "tree" para ver un log personalizado
git config --global alias.tree "log --graph --decorate --all --oneline"

descartar ficheros, ignorarlos y no añadir al branch
crear un fichero con el nombre ".gitignore" en la carpeta del proyecto
Editar el fichero ".gitignore" y escribir los nombre de ficheros y carpetas que no queremos incluir en el branch

Ver diferencias en los ficheros antes de crar la fotografia
git diff

Ir a una fotografia del proyecto con el ID
Primero miraremos el ID con "git log"
git checkout 048ba75261a96e394ea874793fda575921547cc6

poner un nombre a un id del branch
Nos podemos desplazar con checkout con el nombre del tag
git tag clase_1

Eliminar un commit concreto
Nota: no se suele utilizar, es peligroso, elimina por completo un commit
git revert


RAMAS EN git (brach)
--------------------

Crear una nueva rama con el nombre login
git branch login

Movernos a una rama llamada login
git switch login

Traer los cambior de la rama main a la rama login
git merge main 

Hacer un commit temporal, para poder cambiarse a otra rama temporalmente.
git stash 

Ver los stash guardados
git stash list

cargar el stah guardado
git stash pop

Borrar el estah almacenado
git stash drop

Eliminar una rama terminada, ya se hizo merge a la rama principal
Eliminamos la rama login
git branch -d login


SINCRONIZAR CAMBIOS EN GITHUB
-----------------------------

Crear un repositorio en la web de GitHub con el nombre deseado
ejecutar el comando:
git remote add origin https://github.com/hitbit72/hello-git
La dirección url nos la proporciona GitHub al crear al repositorio
Sincronizar por primera ver los datos, main es la rama principal
git push -u origin main

Sincronizar los commit realizados con el repositorio de GitHub:

Hay que indicar el mecanismo para traer los cambios en el config de git
git config pull.rebase false

ver el historial de de github por si alguien añadio algo, pero no descargo nada
git fetch

Descargar el historial y los cambios realizados en GitHub
git pull

Subir los cambios locales a github
git push









